{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Autodidact &amp; Writer","text":""},{"location":"#career","title":"Career","text":"<p>Intel Corporation - Infrastrucure &amp; DevOps Engineer <code>(Present)</code> The world's largest manufacturer of CPUs and semiconductors.</p> <p>The Dec1phers - Co-Founder &amp; Organizer  (Revived as Dec2phers 2023) Ireland's top 3 hacking team - Ctftime 2022.</p> <p>Curlec by Razorpay - Software Engineer Intern A full-stack payments solution acquired by a Y Combinator Company.</p>"},{"location":"#projects","title":"Projects","text":"<p>Autodidact's Delight A blog series about life long learning and knowledge exploration.</p> <p>MK's Zettelkasten Personal zettlekasten, a curated database of my knowledge.</p> <p>Futureoss.com <code>(Coming Soon!)</code> An online repository for sharing trending ideas and technology.</p>"},{"location":"#updates","title":"Updates","text":"<p>While I don't actively engage with social media, you can find me here:</p> <p>Socials Twitter | GitHub | LinkedIn</p>"},{"location":"Knowledge/","title":"Notes","text":""},{"location":"Knowledge/#my-knowledge-rolodex","title":"My Knowledge Rolodex","text":"<p>MK's Zettelkasten</p> <p> Data Structures &amp; Algorithms Mental Models Business &amp; Leadership Miscellaneous <p>\"What are we to do with what we have written down? Certainly, at first, we will produce mostly garbage. But we have been educated to expect something useful from our activities and soon lose confidence if nothing useful seems to result. We should, therefore, reflect on whether and how we arrange our notes so that they are available for later access.\" - Niklas Luhmann</p>"},{"location":"Knowledge/data-structures-and-algorithms/","title":"Data Structures & Algorithms","text":""},{"location":"Knowledge/data-structures-and-algorithms/#content-coming-soon-lol","title":"Content coming soon lol...","text":""},{"location":"blog/","title":"Reading Recommendations","text":"<p>Awesome Reads</p> <ul> <li>Astral Codex Ten | Scott Alexander</li> <li>xkcd | Randall Munroe</li> <li>The singularity is nearer | George Hotz</li> <li>Sam Altman Archive | Sam Altman</li> <li>Raw Thought | Aaron Swartz</li> <li>Andrej Kaparthy Featured Writing | Andrej Kaparthy</li> <li>The Techno-Optimist Manifesto | Marc Andreesseen</li> <li>Chris Lattner's Resume Writing | Chris Lattener</li> <li>Hacker's Manifesto | The Mentor</li> <li>Industrial Society And It's Future | Ted Kaczynski</li> </ul> <p>My Essays</p> <ul> <li>Object Oriented Bash</li> <li>Voilent Python</li> <li>Hello World</li> </ul>"},{"location":"blog/#recently-published","title":"Recently Published","text":""},{"location":"blog/2023/04/01/my-first-blog/","title":"My first blog","text":"<p>I'm excited to announce the start of my very own blog. My aim is to adopt a holistic approach to self-improvement through documentation and notes. This endeavour will undoubtedly push me beyond my comfort zone, and while I don't anticipate a large readership, if you're reading this, I want to thank you for being here.</p>"},{"location":"blog/2023/04/01/my-first-blog/#why-am-i-doing-this","title":"Why am I doing this?","text":"Objective Description Learning I will document my journey and progress in life and professional career by sharing my ideas, challenges and breakthroughs as I learn new techically challenging topics Self Reflection I will share my personal insights, ideas and experiences in the realm of technology and value creation. I also hope to highlight and internalize the lessons I've learned and identify opportunities for personal growth Therapy I want help myself by cultivating a positive mindset, managing stress, finding motivation and overcoming obstacles. Writing it out helps me manifest my desires through action <p>Note</p> <p>This blog will be an evolving entity, just as we are in our own lives. I am excited to see how my writings transform and grow over time. </p>"},{"location":"blog/2023/04/01/my-first-blog/#in-closing","title":"In closing","text":"<p>They say the first step is the hardest, but it's also the most exhilarating. Through this platform, I am taking my first step, and I sincerely invite you to take this journey alongside me. In this connected world, it\u2019s important to remember that we don\u2019t have to walk alone. So, whether you\u2019re a fellow engineer, someone looking for self-improvement, or just a stranger who stumbled upon this blog, I hope my thoughts can brings a smile to your face or offer a different perspective in your own quest for self-improvement. </p> <p>Until next time, </p> <p>Thank you for being here \u2764\ufe0f.</p>"},{"location":"blog/2023/07/22/object-oriented-bash/","title":"Object oriented bash","text":"<p>Here's a thought experiment -  you can only program in bash, and you have been assigned a task that demanded you to model your program with behaviors that could be easily modeled with objects eg. an airplane or a car (you get the idea). Imagine the complexities that might arise from a command-styled, procedurally programmatic language like bash to define the modularity, components, and properties of a vehicle.</p> <p>Well, driven by my curiosity and lots of free time, I sought to explore how we might go about implementing object-oriented programming in bash.</p>"},{"location":"blog/2023/07/22/object-oriented-bash/#object-oriented-programming-principles","title":"Object Oriented Programming Principles","text":"<p>Object-Oriented Programming (OOP) is a paradigm that uses \"objects\" to design applications. These objects bundle related data, known as state, and methods to manipulate this data, known as behavior. Objects interact via message passing which invokes methods, allowing dynamic behavior. OOP is implemented using techniques like dynamic dispatch and closures. Behaviors are defined in a class but executed at runtime. A key requirement for OOP is lexical scoping, which allows a function to access variables from its enclosing scope. Without it, OOP implementation becomes challenging.</p>"},{"location":"blog/2023/07/22/object-oriented-bash/#object-oriented-example","title":"Object Oriented Example","text":"<p>Below shows a class diagram that illustrates a PlantUML example of how we can apply the OOP Principles</p> <p>In our UML Diagram, a base class Animal with subclasses Dog, Cat, and Mosquito inherits from Animal and overrides the sound method. The State class is associated with the Animal class and has two properties: isAlive and Health. This class represents the state of an animal, indicating whether it's alive and its health status. </p> <pre><code>classDiagram\n    Animal &lt;|-- Dog\n    Animal &lt;|-- Cat\n    Animal &lt;|-- Mosquito\n    Animal : +String name\n    Animal : +int age\n    Animal: +sound() String\n    State &lt;|-- Animal\n    State: +boolean isAlive\n    State: +String Health\n    class Dog{\n      +String breed\n      +sound() String (returns \"woof\")\n      +findOwner()\n    }\n    class Cat{\n      +String color\n      +sound() String (returns \"meow\")\n      +scratch()\n    }\n    class Mosquito{\n      +sound() String (returns \"eeeeeeee\u00eb\")\n      +feed()\n    }\n</code></pre>"},{"location":"blog/2023/07/22/object-oriented-bash/#experimentation","title":"Experimentation","text":"<p>Compgen is used as a command in Unix-like operating systems, to generate possible completions for commands and filenames. For example, running compgen -c will list all the available commands, while compgen -f will generate a list of filenames in the current directory.</p> <p>We utilize a <code>this</code> variable to declare a pointer variable which we could then use to initialize a static member function, The constructor can be called with the <code>1$</code> which references itself and performs the memory allocation before it has been completely initialized for future classes or functions that have not yet been created. We can utilize the built-in <code>export</code> keyword in bash to create variables that can be accessed through the child processes created by the subsequent scripts. By utilizing compgen, we could enable bash files to inherit methods between files, allowing the program execution to access the built-in methods of the class. This allows for methods to dynamic bind explicitly to another class and allows for the method cast to be called.</p> <p>Class structure setup by simulating the _this keyword.</p> <p>Heres an example:</p> <pre><code>#!/bin/bash\n\nfunction name() {\n    # Pointer to the base state class\n    base=$FUNCNAME\n    this=$1\n\n    # Variable properties\n    export ${this}_var1=$2\n    export ${this}_var2=$3\n    export ${this}_var3=$4\n\n    # Declare methods of base class \n    for method in $(compgen -A function)\n    do\n        export ${method/#$base\\_/$this\\_}=\"${method} ${this}\"\n    done\n\n}\n</code></pre>"},{"location":"blog/2023/07/22/object-oriented-bash/#project-setup","title":"Project Setup","text":"<pre><code># create object files and make them executable\ntouch state.sh animal.sh main.sh\nchmod +x state.sh animal.sh main.sh\n</code></pre> <p>Getting Animal to inherit from State. Consider state.sh as a base class file to define a state object.</p> <p>Based on our UML diagram, we need to create a base class called State. through the OOP concept of inheritence, we want the attributes of the State class to be inherited from the Animal class and the animals we create later in the application to all inherit from the state class. This means each Animal will have a boolean attribute <code>isAlive</code> and a String attribute <code>Health</code> indicating their current state.</p>"},{"location":"blog/2023/07/22/object-oriented-bash/#statesh","title":"state.sh","text":"<pre><code>#!/bin/bash \n\n# Base state class\nfunction State() {\n    # Pointer to the base state class\n    base=$FUNCNAME\n    this=$1\n\n    # Declare state properties\n    export ${this}_isAlive=$2 # boolean value\n    export ${this}_Health=$3 # String value\n\n    # Declare methods of base class \n    for method in $(compgen -A function)\n    do\n        export ${method/#$base\\_/$this\\_}=\"${method} ${this}\"\n    done\n\n    state=$(eval \"echo \\$${this}_isAlive\")\n}\n\n# Display human readable representation of the state of the animal\nfunction State_show() {\n\n    # Obtain reference from base class\n    base=$(expr \"$FUNCNAME\" : '\\([a-zA-Z][a-zA-Z0-9]*\\)')\n    this=$1\n\n    # Retrieve base components\n    isAlive=$(eval \"echo \\$${this}_isAlive\")\n    Health=$(eval \"echo \\$${this}_Health\")\n\n    echo \"State_show() -&gt; $this ($isAlive, $Health)\"\n}\n</code></pre> <p>Testing inheritance in the Animal class and defining the attributes </p> <p>We create an Animal class to test the inheritance of the state object, for testing purposes we utilize the animal class to create animal states for dog, cat and mosquito. As you can see, the state functions and variables can be invoked in the animal class. This proves that lexical scoping can be achieved by calling the state variables with an underscore eg. <code>_isAlive</code> or <code>_animalState</code>. </p>"},{"location":"blog/2023/07/22/object-oriented-bash/#animalsh","title":"animal.sh","text":"<pre><code>#!/bin/bash \n\n# import state object \n. state.sh\n\n# Defining base class \nfunction Animal() {\n\n    # A pointer to the Animal class\n    base=$FUNCNAME\n    this=$1\n\n    # Inherited classes (eg State)\n    export ${this}_inherits=\"dogState, catState, mosquitoState\" # (3.1)\n\n    for class in $(eval \"echo \\$${this}_inherits\")\n    do\n        for property in $(compgen -A variable ${class}_)\n        do\n            export ${property/#$class\\_/$this\\_}=\"${property}\" # (3.2)\n        done\n\n        for method in $(compgen -A function ${class}_)\n        do\n            export ${method/#$class\\_/$this\\_}=\"${method} ${this}\"\n        done\n    done\n\n    # creating default states for all the animals\n    State \"dogState\" true \"healthy\"\n    State \"catState\" true \"obese\"\n    State \"mosquitoState\" false \"splattered\"\n\n    # Test animal state variables\n    echo \"Animal state variable properties : \n                dogState ($dogState_isAlive, $dogState_Health), \n                catState ($catState_isAlive, $catState_Health), \n                mosquitoState ($mosquitoState_isAlive, $mosquitoState_Health)\"\n\n    # Test animal state methods\n    echo \"Animal base state methods :\"\n    $dogState_show\n    $catState_show\n    $mosquitoState_show\n}\n\nAnimal\n</code></pre> <p>output from animal.sh (reformatted to show property and method data)</p> <p>The data can be transiently accessed through the animal class, which means that theoretically, we can abstract the animal into other classes eg. dog.sh, cat.sh or mosquito.sh.</p> <pre><code>./animal.sh\n\nAnimal state variable properties : \n                dogState (true, healthy), \n                catState (true, obese), \n                mosquitoState (false, splattered)\n\nAnimal base state methods :\n                Health Status -&gt; dogState (true, healthy)\n                Health Status -&gt; catState (true, obese)\n                Health Status -&gt; mosquitoState (false, splattered)\n</code></pre>"},{"location":"blog/2023/07/22/object-oriented-bash/#creating-animal-objects-implementation","title":"Creating Animal Objects - Implementation","text":"<p>File Structure <pre><code>animal\n    \u251c\u2500\u2500 state.sh\n    \u251c\u2500\u2500 animal.sh\n    \u2514\u2500\u2500 main.sh\n</code></pre></p> <p>Rewriting the animal class into an abstract class.</p> <p>Now by utilizing the same idea as <code>State()</code> we can simulate the same idea of creating the inheritnace of our animal attributes using the <code>_this</code> keyword and <code>compgen</code>. Abstract classes are designed to be a generalization of animals, and it is not meant to be instantiated on their own. Instead, it serves as a blueprint for more specific classes, often called concrete classes eg. <code>Dog()</code>, <code>Cat()</code>, <code>Mosquito()</code>, which inherit from the Animal class.</p>"},{"location":"blog/2023/07/22/object-oriented-bash/#animalsh_1","title":"animal.sh","text":"<pre><code>#!/bin/bash \n\n# import state object \n. state.sh\n\n# Defining base class \nfunction Animal() {\n\n    # A pointer to the Animal class\n    base=$FUNCNAME\n    this=$1\n\n    # Inherited classes (eg State)\n    export ${this}_inherits=\"dogState, catState, mosquitoState\" # (3.1)\n\n    for class in $(eval \"echo \\$${this}_inherits\")\n    do\n        for property in $(compgen -A variable ${class}_)\n        do\n            export ${property/#$class\\_/$this\\_}=\"${property}\" # (3.2)\n        done\n\n        for method in $(compgen -A function ${class}_)\n        do\n            export ${method/#$class\\_/$this\\_}=\"${method} ${this}\"\n        done\n    done\n\n    # Declare animal properties \n    export ${this}_sound=$2\n    export ${this}_age=$3\n    export ${this}_animalState=$4\n    export ${this}_isAlive=$5\n    export ${this}_Health=$6\n\n    # Declare animal methods\n    for method in $(compgen -A function)\n    do\n        export ${method/#$base\\_/$this\\_}=\"${method} ${this}\"\n    done\n}\n\n# Defining animal sound property\nfunction sound() {\n    # Obtaining reference from base class \n    base=$(expr \"$FUNCNAME\" : '\\([a-zA-Z][a-zA-Z0-9]*\\)')\n    this=$1\n\n    # Retrieve base compenents\n    animal_sound=$(eval \"echo \\$${this}_sound\")\n    echo \"$this a dog says $animal_sound\"    \n}\n</code></pre> <p>To demonstrate the simulation of inheriting from an abstract class, I will generalize the application layer into a main file called <code>main.sh</code>. The methods and attributes of our abstract class <code>Animal()</code> has been inherited and are accessible to our concrete class. This theoretically implies that we can also utilize OOP concepts such as polymorphism and Encapsulation to manipulate our programs through base Inheritance and Abstraction. </p>"},{"location":"blog/2023/07/22/object-oriented-bash/#mainsh","title":"main.sh","text":"<pre><code>#!/bin/bash \n\n# import state and animal objects\n. state.sh\n. animal.sh \n\nfunction main() {\n    # Create animal objects\n    # Animal 'animal_type' 'animal_type_sound' 'animal_type_age' 'animal_type_stateid' 'animal_isAlive' 'anial_health'\n    Animal 'dog' 'woof' 12 'dogState' true 'healthy'\n    Animal 'cat' 'meow' 9 'catState' true 'obese'\n    Animal 'mosquito' 'eeeeee\u00eb' 0.5 'mosquitoState' false 'splattered'\n\n    # display inherited states \n    echo \"dog ($dog_sound, $dog_age, $dog_dogState, $dog_isAlive, $dog_Health)\"\n    echo \"cat ($cat_sound, $cat_age, $cat_catState, $cat_isAlive, $cat_Health)\"\n    echo \"mosquito ($mosquito_sound, $mosquito_age, $mosquito_mosquitoState, $mosquito_isAlive, $mosquito_Health)\"\n}\n\nmain\n</code></pre> <p>output from main.sh (simulated as a general environment to create object classes)</p> <p>The abstract class data of animal can be accessed transiently in our main function and used to initialize different animals.</p> <pre><code>./main.sh \ndog (woof, 12, , true, healthy)\ncat (meow, 9, , true, obese)\nmosquito (eeeeee\u00eb, 0.5, , false, splattered)\n</code></pre>"},{"location":"blog/2023/07/22/object-oriented-bash/#in-conclusion","title":"In Conclusion","text":"<p>\"If you have to write bash functions, you might as well write it in Python or Golang\" </p> <p>Bash is painful to write unless you're using it to mock up a procedural, command-styled setup or linker script - it's not worth trying to model Minecraft using pure bash. While the ideas I've proposed are theoretically possible and can be simulated using bash utils - and the idea of writing fully-fledged OO scripts in CICD processes might be tempting, but the juice is simply not worth the squueze. </p>"},{"location":"blog/2023/07/22/object-oriented-bash/#resources","title":"Resources","text":"<ol> <li>Original article that inspired the idea</li> <li>Custom useful bash libraries</li> <li>Wikipedia to study OO concepts</li> </ol>"},{"location":"blog/2023/05/31/voilent-python/","title":"Voilent python","text":"<p>Abtract</p> <p>My review and open source contribution to \"Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers and Security Engineers\" </p> <p>In early 2020 when I first ventured into the world of ethical computer hacking and cyber security, I stumbled upon an incredible book called Violent Python by TJ O'Connor. The book explores the practical applications and features of the now deprecated Python 2.6 applied to offensive security techniques such as network scanning, packet manipulation, password cracking and web reconnaissance. While the key takeaways from the book were invaluable, and the book offers a practical guide into the world of cyber security, it is important to note that at the time of writing this, Python 2.6 reached its end-of-life status in October 2013 and is no longer officially supported. </p> <p>Python 3 introduced several backward-incompatible changes including:</p> <ol> <li>Print Statements</li> <li>Integer Division</li> <li>Unicode Handling </li> <li>Module Modifications </li> <li>Syntax Changes</li> </ol> <p>This left me in a bind while following the book, as code snippets and step-by-step instructions didn't work on a python3 interpreter which I had installed at that time. Resulting in many unintended syntax errors and exception raises. </p>"},{"location":"blog/2023/05/31/voilent-python/#the-project","title":"The Project","text":"<p>I found a guy on Github that had identified the same problem of language backward compatibility with programming books,  at the time that I stumbled upon this problem he had made a full source code conversion of the book Black Hat Python, by Justin Seitz. He'd started a repository on the exact book I was looking to refactor, so I started submitting pull requests to his repository and we both started hacking on a full release. </p> <p>This project setup assumes you are on a linux environment</p> <p>1. Copy this snippet into a file called <code>setup.sh</code> <pre><code>#!/bin/bash\ngit clone https://github.com/EONRaider/violent-python3\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre></p> <p>2. Make the file an executable, and run the environment setup: <pre><code>user@host:~/DIR$ chmod +x setup.sh\nuser@host:~/DIR$ ./setup.sh\n</code></pre></p>"},{"location":"blog/2023/05/31/voilent-python/#release-notes-010","title":"Release Notes - 0.1.0","text":"<p>Python 3 compatibility</p> <p>The code has been fully converted to Python 3, reformatted to comply with PEP8 standards and refactored to eliminate dependency issues involving the implementation of deprecated libraries.</p> <p>Added: - Directory and file names are now more intuitive and reflect chapter contents. - Adopted PEP 8 naming conventions for files, variables, functions, classes, and methods. - Refactored code in Chapter 5; however, note that some examples may be outdated or impractical.</p> <p>Updated: - Replaced string concatenation with string interpolation for better readability. - Replaced deprecated 'optparse' library with 'argparse' for command-line argument parsing. - Improved error handling by replacing generic exceptions with specific clauses. - Employed context managers to ensure files and databases are properly closed.</p> <p>Removed: - Removed encoding comments, as UTF-8 is now the standard in Python 3. - Kept global variables despite not being a best practice, to maintain the original code's logic.</p> <p>Unchanged: - Code in Chapter 6 for Google and Twitter APIs is outdated and not refactored. </p>"},{"location":"blog/2023/05/31/voilent-python/#refactoring-summary","title":"Refactoring Summary","text":"<p>The following includes the changes made in our full release, files not listed below can be assumed to have been refactored in one way or another as established in the Realease Notes section.</p> Sections Changes chapter01/vuln_scanner.py Moved iteration control into the conditional statement in the main function to handle OSError for non-existent files. chapter02/nmap_scan.py Replaced deprecated optparse with argparse. Moved iteration into nmap_scan function for efficiency. chapter02/ssh_command.py Moved initialization code into main scope, renamed conflicting variables, and decoded prompt information for readability. chapter02/ssh_brute.py Fixed import statement and indentation errors. chapter02/ssh_brutekey.py Added a compressed archive with necessary pre-generated keys due to an inaccessible URL. chapter02/ssh_botnet.py Removed an unused import, reorganized code under main, and unified command issuance. chapter02/conficker.py Removed an unused call to the sys library. chapter03/discover_networks.py Reimplemented using WiGLE API via the requests library, and added exception handling. chapter03/pdf_read.py Replaced deprecated PyPDF with PyPDF4. chapter03/exif_fetch.py Added an argument to BeautifulSoup for compatibility. chapter03/skype_parse.py &amp; firefox_parse.py Added example files for convenience. chapter03/iphone_messages.py Refactored but remains untested due to unavailability of files. chapter04/geo_ip.py Replaced deprecated pygeoip with geoip2, and added CLI via argparse. chapter04/print_direction.py Fixed file opening argument to handle UnicodeDecodeError. chapter04/find_ddos.py Corrected the output to display the destination address. chapter04/test_domain_flux.py Modified packet analysis logic for accuracy. chapter05/blue_bug.py Fixed object reference and noted dependency installations. chapter05/ftp_sniff.py Corrected logic for displaying username and password. chapter05/ninja_print.py Noted the code remains in Python 2 due to library limitations. chapter05/ &amp; chapter06/<code>__init__.py</code> module imports. chapter06/anon_proxy.py &amp; anon_browser.py Re-implemented with MechanicalSoup library and updated related modifications. chapter06/link_parser.py Updated implementations of re and bs4."},{"location":"blog/2023/05/31/voilent-python/#in-conclusion","title":"In conclusion","text":"<p>The changes encompass a series of significant refactoring efforts to improve the efficiency readability and compatibility of the Python project. With the update of deprecated libraries, restructuring of code examples, and the inclusion of dependency files. </p> <p>My exposure to this project has been an enlightening journey, particularly as it marked my first exploration into the expansive realm of computer exploitation. Through my involvement, I've gained a wealth of knowledge on hacking computer systems.</p> <p>I would like to take this opportunity to thank TJ O'Connor for writing this marvellous book, and EONRaider for creating this project. </p>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/technology/","title":"technology","text":""},{"location":"blog/category/bash/","title":"bash","text":""},{"location":"blog/category/programming/","title":"programming","text":""},{"location":"blog/category/python/","title":"python","text":""},{"location":"blog/category/cyber-security/","title":"cyber-security","text":""},{"location":"blog/category/hacking/","title":"hacking","text":""},{"location":"blog/category/first-blog/","title":"first-blog","text":""}]}